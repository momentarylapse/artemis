use artemis.*
use linalg.*
use fem.material.*

class StringFEM extends Node
	var in_u: InPortVectorField
	var in_dt_u: InPortVectorField
	var out_dt_dt_u: OutPortVectorField
	
#	let length = 0.648 # m  (implicit via grid)
	var tension: SettingFloat # [N]
	var diameter: SettingFloat # [m]
	var fixed_ends: SettingBool
	var substeps: SettingInt
		
	var mat: Material
	
	
	func __init__()
		super.__init__("StringFEM")
		in_u.__init__(self, "u", PortFlags.MUTABLE)
		in_dt_u.__init__(self, "dt-u", PortFlags.MUTABLE)
		out_dt_dt_u.__init__(self, "dt-dt-u")
		flags = NodeFlags.TIME_DEPENDENT
		
		tension.__init__(self, "tension", 84.0)
		diameter.__init__(self, "diameter", 0.0004318) # gauge = 0.017 inch
		fixed_ends.__init__(self, "fixed-ends", true)
		substeps.__init__(self, "substeps", 10)
		
		mat = nickel()


	func mut substep(dt: f64, out u: VectorField, out dt_u: VectorField, out dt_dt_u: VectorField)
	#	var (ux, uy, uz) = u.split()
		var ux = u.get_component(0)
		var uy = u.get_component(1)
		var uz = u.get_component(2)
		let laplace_ux = hessian_x(ux, 0, 0)
		let laplace_uy = hessian_x(uy, 0, 0)
		let laplace_uz = hessian_x(uz, 0, 0)
		let laplace_u = VectorField.merge(laplace_ux, laplace_uy, laplace_uz)
		
		let radius = diameter() / 2
		let A = f64(pi) * radius^2
		let µ = mat.density * A # [kg/m]
		let C = tension() / µ / 2 # [m²/s²]
	
		dt_dt_u = laplace_u * C
		dt_u += dt_dt_u * dt
		u += dt_u * dt
			
		# boundary
		if not fixed_ends()
			return
		let n = ux.grid.nx
		u._set(0,0,0, [0,0,0])
		dt_u._set(0,0,0, [0,0,0])
		u._set(n,0,0, [0,0,0])
		dt_u._set(n,0,0, [0,0,0])


	func override on_process()
		# assume PER_VERTEX
		for u in in_u.value()
			for dt_u in in_dt_u.value()
			
				var dt_dt_u = u # dummy
		
				let dt = current_session().graph.dt
				let N = substeps()
				for i in 0:N
					substep(dt / N, u, dt_u, dt_dt_u)
			
				in_u.mutated()
				in_dt_u.mutated()
				out_dt_dt_u.set(dt_dt_u)
	
		