use artemis.*
use fem.material.*

class Elastic3dFEM extends Node
	var in_u: InPortVectorField
	var in_dt_u: InPortVectorField
	
	var mat: Material
	
	
	func __init__()
		super.__init__("Elastic2dFEM")
		in_u.__init__(self, "u", PortFlags.MUTABLE)
		in_dt_u.__init__(self, "dt-u", PortFlags.MUTABLE)
		flags = NodeFlags.TIME_DEPENDENT
		
		mat = nickel()
	
	func mut substep(dt: f32, out ux: ScalarField, out uy: ScalarField, out uz: ScalarField, out dt_ux: ScalarField, out dt_uy: ScalarField, out dt_uz: ScalarField)
	#	print("---------------------")
	
	# i: C_ijkl d_j d_k u_l
	
		let dx_dx_ux = hessian_x(ux, 0, 0)
		let dx_dx_uy = hessian_x(uy, 0, 0)
		let dx_dx_uz = hessian_x(uz, 0, 0)
	
		let dx_dy_ux = hessian_x(ux, 0, 1)
		let dx_dy_uy = hessian_x(uy, 0, 1)
		let dx_dy_uz = hessian_x(uz, 0, 1)
	
		let dx_dz_ux = hessian_x(ux, 0, 2)
		let dx_dz_uy = hessian_x(uy, 0, 2)
		let dx_dz_uz = hessian_x(uz, 0, 2)
	
		let dy_dy_ux = hessian_x(ux, 1, 1)
		let dy_dy_uy = hessian_x(uy, 1, 1)
		let dy_dy_uz = hessian_x(uz, 1, 1)
	
		let dy_dz_ux = hessian_x(ux, 1, 2)
		let dy_dz_uy = hessian_x(uy, 1, 2)
		let dy_dz_uz = hessian_x(uz, 1, 2)
	
		let dz_dz_ux = hessian_x(ux, 2, 2)
		let dz_dz_uy = hessian_x(uy, 2, 2)
		let dz_dz_uz = hessian_x(uz, 2, 2)
		
		let C = mat.elastic_modulus()
	
		# C.xxyy etc will be ignored for now...
		
		var fx = dx_dx_ux * C.xxxx
		fx += (dx_dy_uy + dy_dy_ux) * C.xyxy
		fx += (dx_dz_uz + dz_dz_ux) * C.xzxz
		var fy = dy_dy_uy * C.yyyy
		fy += (dx_dy_ux + dx_dx_uy) * C.xyxy
		fy += (dy_dz_uz + dz_dz_uy) * C.yzyz
		var fz = dz_dz_uz * C.zzzz
		fz += (dx_dz_ux + dx_dx_uz) * C.xzxz
		fz += (dy_dz_uy + dy_dy_uz) * C.yzyz
		
	
		dt_ux += fx * (dt / mat.density)
		dt_uy += fy * (dt / mat.density)
		dt_uz += fz * (dt / mat.density)
		ux += dt_ux * dt
		uy += dt_uy * dt
		uz += dt_uz * dt
		#print(dux|>log)
	
	func override on_process()
		# assume f32
		# assume PER_VERTEX
		for u in in_u.value()
			for dt_u in in_dt_u.value()
			
				var ux = u.get_component(0)
				var uy = u.get_component(1)
				var uz = u.get_component(2)
				var dt_ux = dt_u.get_component(0)
				var dt_uy = dt_u.get_component(1)
				var dt_uz = dt_u.get_component(2)
		
				let dt = current_session().graph.dt
				let N = 100
				for i in 0:N
					substep(dt / N, ux, uy, uz, dt_ux, dt_uy, dt_uz)
			
			
				u.set_component(0, ux)
				u.set_component(1, uy)
				u.set_component(2, uz)
				dt_u.set_component(0, dt_ux)
				dt_u.set_component(1, dt_uy)
				dt_u.set_component(2, dt_uz)
				in_u.mutated()
				in_dt_u.mutated()
	
		