use linalg.*

struct Grid
	var N = 8   # cells
	var D = 0.1 # cell size
	
	# function components
	func n() -> int
		return N+1

	# <phi[i], laplace u>
	func phi_laplace_u(u: float[]) -> float[]
		let M = phi_ddphi()
		return mul(M, u)
	
	# <phi[i], phi[j]>
	func phi_phi() -> SparseMatrix
		var m: Ret
		m.clear(n(), n())
		let A = D / 6
		# diagonal
		for i in 0:N
			m.set(i,i, 4*A)
		m.set(0,0, 2*A)
		m.set(N,N, 2*A)
		# 1st parallel
		for i in 0:N
			m.set(i,i+1, A)
			m.set(i+1,i, A)
		return m

	# M = <phi[i], d/dx phi[j]>
	# M * u = <phi, d/dx u>
	func phi_dphi() -> SparseMatrix
		var m: Ret
		m.clear(n(), n())
		# diagonal
		m.set(0,0, 0.5)
		m.set(N,N, -0.5)
		# 1st parallel
		for i in 0:N
			m.set(i+1,i, 0.5)
			m.set(i,i+1, -0.5)
		return m

	# M = <phi[i], d²/dx²phi[j]>
	# M * u = <phi, d²/dx² u>
	func phi_ddphi() -> SparseMatrix
		var m: Ret
		m.clear(n(), n())
		let A = 1.0/D
		# diagonal
		for i in 0:N
			m.set(i,i, -2*A)
		m.set(0,0, -A)
		m.set(N,N, -A)
		# 1st parallel
		for i in 0:N
			m.set(i,i+1, A)
			m.set(i+1,i, A)
		return m


func __test()
func main()
	var g: Grid
	g.D = 2.0/3
	g.N = 3
#	print(g.phi_phi().to_matrix())
#	print("")
#	print(g.phi_dphi().to_matrix())
	print("")
	print(g.phi_ddphi().to_matrix())
