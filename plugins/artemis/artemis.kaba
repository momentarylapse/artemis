use kaba

struct Mesh
	func extern __init__()

struct RegularGrid
	func extern __init__()
	var nx, ny, nz: i32
	var dx, dy, dz: vec3

enum SamplingMode
	PER_CELL
	PER_VERTEX

struct ScalarField
	var grid: RegularGrid
	var v32: f32[]
	var v64: f64[]
	func extern __init__()
	func extern __delete__()
	func extern mut set(i: i32, j: i32, k: i32, v: f32)
	func extern value(i: i32, j: i32, k: i32) -> f32
	func extern mut __assign__(o: ScalarField)

struct VectorField
	var grid: RegularGrid
	var v32: vec3[]
	func extern __init__()
	func extern __delete__()
	func extern mut set(i: i32, j: i32, k: i32, v: vec3)
	func extern value(i: i32, j: i32, k: i32) -> vec3
	func extern mut __assign__(o: VectorField)
	func extern mut __iadd__(o: VectorField)
	func extern __add__(o: VectorField) -> VectorField
	func extern mut __isub__(o: VectorField)
	func extern __sub__(o: VectorField) -> VectorField
	func extern mut __imul__(o: f32)
	func extern __mul__(o: f32) -> VectorField
	func extern componentwise_product(o: VectorField) -> VectorField

struct PlotData

struct RenderData

struct ColorMap
	var colors: color[]
	var values: f32[]


enum NodeFlags
	NONE = 0
	RESOURCE = 1
	RENDERER = 2
	TIME_DEPENDENT = 4

class Node
	func extern __init__(name: string)
	func extern virtual __delete__()
	func extern virtual mut process()
	func extern virtual mut create_panel() -> void*
	func extern mut set(key: string, value: any)
	var flags: NodeFlags
	var dirty: bool

enum PortFlags
	NONE = 0
	MUTABLE = 1
	OPTIONAL = 2
	MULTI = 4

# TODO kaba template classes!
class InPortScalarField
	func extern __init__(node: Node, name: string, flags: PortFlags)
	func extern value() -> ScalarField*
	func extern mutated()
class OutPortScalarField
	func extern __init__(node: Node, name: string, flags: PortFlags)
	func extern set(x: ScalarField)

class InPortVectorField
	func extern __init__(node: Node, name: string, flags: PortFlags)
	func extern value() -> VectorField*
	func extern mutated()
class OutPortVectorField
	func extern __init__(node: Node, name: string, flags: PortFlags)
	func extern set(x: VectorField)
	
class InPortRegularGrid
	func extern __init__(node: Node, name: string, flags: PortFlags)
	func extern value() -> RegularGrid*
	func extern mutated()

class Graph
	func extern add_node(name: string, pos: vec2) -> Node&
	func extern connect(source: Node&, source_port: i32, sink: Node&, sink_port: i32)



class Session
	var graph: owned![Graph]


var extern simulation_time: f32
var extern simulation_dt: f32

func extern current_session() -> Session&

func extern create_scalar_field(g: RegularGrid, t: kaba.Class&, s: SamplingMode) -> ScalarField
func extern create_vector_field(g: RegularGrid, t: kaba.Class&, s: SamplingMode) -> VectorField

func extern gradient(f: ScalarField) -> VectorField
func extern divergence(f: VectorField) -> ScalarField
func extern rotation_fw(f: VectorField) -> VectorField
func extern rotation_bw(f: VectorField) -> VectorField
func extern laplace(f: ScalarField) -> ScalarField




func extern create_session() -> Session*
func extern start() -> Session*
func extern run()
