use kaba

enum SamplingMode
	PER_CELL
	PER_VERTEX

struct Mesh
	func extern __init__()

struct RegularGrid
	func extern __init__()
	var nx, ny, nz: i32
	var dx, dy, dz: vec3
	func extern points(mode: SamplingMode) -> vec3[]

struct Grid
	var regular: RegularGrid?
	func extern __init__()
	func extern points(mode: SamplingMode) -> vec3[]

struct ScalarField
	var grid: RegularGrid
	var v32: f32[]
	var v64: f64[]
	func extern __init__()
	func extern __delete__()
	func extern mut set(i: i32, j: i32, k: i32, v: f32)
	func extern value(i: i32, j: i32, k: i32) -> f32
	func extern type() -> kaba.Class&
	func extern mut __assign__(o: ScalarField)
	func extern mut __iadd__(o: ScalarField)
	func extern __add__(o: ScalarField) -> ScalarField
	func extern mut __isub__(o: ScalarField)
	func extern __sub__(o: ScalarField) -> ScalarField
	func extern mut __imul__(o: f32)
	func extern __mul__(o: f32) -> ScalarField
	
	func extern static create(g: RegularGrid, t: kaba.Class&, s: SamplingMode) -> ScalarField

struct VectorField
	var grid: RegularGrid
	var v32: vec3[]
	func extern __init__()
	func extern __delete__()
	func extern mut set(i: i32, j: i32, k: i32, v: vec3)
	func extern value(i: i32, j: i32, k: i32) -> vec3
	func extern type() -> kaba.Class&
	func extern mut __assign__(o: VectorField)
	func extern mut __iadd__(o: VectorField)
	func extern __add__(o: VectorField) -> VectorField
	func extern mut __isub__(o: VectorField)
	func extern __sub__(o: VectorField) -> VectorField
	func extern mut __imul__(o: f32)
	func extern __mul__(o: f32) -> VectorField
	func extern cwise_product(o: VectorField) -> VectorField
	
	func extern static create(g: RegularGrid, t: kaba.Class&, s: SamplingMode) -> VectorField
	func extern split() -> (ScalarField, ScalarField, ScalarField)
	func extern get_component(i: i32) -> ScalarField
	func extern mut set_component(i: i32, s: ScalarField)
	func extern static merge(x: ScalarField, y: ScalarField, z: ScalarField) -> VectorField

struct MultiComponentField
	var grid: RegularGrid
	var v32: vec3[]
	func extern __init__()
	func extern __delete__()
	func extern mut set(i: i32, j: i32, k: i32, v: vec3)
	func extern value(i: i32, j: i32, k: i32) -> vec3
	func extern type() -> kaba.Class&
	func extern mut __assign__(o: MultiComponentField)
	func extern mut __iadd__(o: MultiComponentField)
	func extern __add__(o: MultiComponentField) -> MultiComponentField
	func extern mut __isub__(o: MultiComponentField)
	func extern __sub__(o: MultiComponentField) -> MultiComponentField
	func extern mut __imul__(o: f32)
	func extern __mul__(o: f32) -> MultiComponentField
	func extern cwise_product(o: MultiComponentField) -> MultiComponentField
	
	func extern static create(g: RegularGrid, t: kaba.Class&, s: SamplingMode, components: i32) -> MultiComponentField

struct PlotData

struct RenderData

struct GenericData # dummy for receiving anything

struct ColorMap
	var colors: Color[]
	var values: f32[]


enum NodeFlags
	NONE = 0
	RESOURCE = 1
	RENDERER = 2
	TIME_DEPENDENT = 4

class Node
	func extern __init__(name: string)
	func extern virtual __delete__()
	func extern mut process()
	func extern virtual mut on_process()
	func extern virtual mut create_panel() -> void*
	func extern mut set(key: string, value: Any)
	var name: string
	var channel: i32
	var flags: NodeFlags
	var dirty: bool

enum PortFlags
	NONE = 0
	MUTABLE = 1
	OPTIONAL = 2
	MULTI = 4

# TODO kaba template classes!
class InPortScalarField
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern value() -> ScalarField*
	func extern mutated()
class OutPortScalarField
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern set(x: ScalarField)

class InPortVectorField
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern value() -> VectorField*
	func extern mutated()
class OutPortVectorField
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern set(x: VectorField)

class InPortMultiComponentField
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern value() -> MultiComponentField*
	func extern mutated()
class OutPortMultiComponentField
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern set(x: MultiComponentField)
	
class InPortGrid
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern value() -> Grid*
	func extern mutated()

class InPortList
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern value() -> f64[]*
	func extern mutated()
class OutPortList
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern set(x: f64[])

class InPortVectorList
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern value() -> vec3[]*
	func extern mutated()
class OutPortVectorList
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern set(x: vec3[])

class InPortGeneric
	func extern __init__(node: Node, name: string, flags: PortFlags = PortFlags.NONE)
	func extern value() -> GenericData*
	func extern types() -> kaba.Class&[]
	func extern mutated()


class SettingFloat
	func extern __init__(node: Node, name: string, value: f64, options: string = "")
	func extern call() -> f64&
	func extern mut set(value: f64)

class SettingInt
	func extern __init__(node: Node, name: string, value: i32, options: string = "")
	func extern call() -> i32&
	func extern mut set(value: i32)

class SettingBool
	func extern __init__(node: Node, name: string, value: bool, options: string = "")
	func extern call() -> bool&
	func extern mut set(value: bool)

class SettingString
	func extern __init__(node: Node, name: string, value: string, options: string = "")
	func extern call() -> string&
	func extern mut set(value: string)

class SettingColor
	func extern __init__(node: Node, name: string, value: Color, options: string = "")
	func extern call() -> Color&
	func extern mut set(value: Color)

class Graph
	func extern clear()
	func extern add_node(name: string, pos: vec2) -> Node&
	func extern connect(source: Node&, source_port: i32, sink: Node&, sink_port: i32)
	var t: f32
	var dt: f32



class Session
	var graph: owned![Graph]

func extern current_session() -> Session&

func extern gradient(f: ScalarField) -> VectorField
func extern divergence(f: VectorField) -> ScalarField
func extern rotation_fw(f: VectorField) -> VectorField
func extern rotation_bw(f: VectorField) -> VectorField
func extern laplace(f: ScalarField) -> ScalarField
func extern hessian_x(f: ScalarField, i: i32, j: i32) -> ScalarField


namespace profiler
	func extern static create_channel(name: string, parent: i32) -> i32
	func extern static begin(channel: i32)
	func extern static end(channel: i32)


func extern create_session() -> Session*
func extern start() -> Session*
func extern run()
