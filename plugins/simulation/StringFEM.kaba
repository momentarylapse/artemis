use artemis.*
use linalg.*
use fem.d1p1.*
use fem.material.*

class StringFEM extends Node
	var in_ux: InPortScalarField
	var in_uy: InPortScalarField
	var in_dt_ux: InPortScalarField
	var in_dt_uy: InPortScalarField
	var out_u: OutPortVectorField
	
#	let length = 0.648 # m  (implicit via grid)
	var tension: SettingFloat # [N]
	var diameter: SettingFloat # [m]
		
	var mat: Material
	
	
	func __init__()
		super.__init__("StringFEM")
		in_ux.__init__(self, "ux", PortFlags.NONE)
		in_uy.__init__(self, "uy", PortFlags.NONE)
		in_dt_ux.__init__(self, "dt-ux", PortFlags.NONE)
		in_dt_uy.__init__(self, "dt-uy", PortFlags.NONE)
		out_u.__init__(self, "u", PortFlags.NONE)
		flags = NodeFlags.TIME_DEPENDENT
		
		tension.__init__(self, "tension", 84.0)
		diameter.__init__(self, "diameter", 0.0004318) # gauge = 0.017 inch
		
		mat = nickel()

	func mut substep(dt: f32, out ux: ScalarField, out uy: ScalarField, out dt_ux: ScalarField, out dt_uy: ScalarField)
		let laplace_ux = hessian_x(ux, 0, 0)
		let laplace_uy = hessian_x(uy, 0, 0)
		
		let radius = f32(diameter()) / 2
		let A = pi * radius^2
		let µ = mat.density * A # [kg/m]
		let C = f32(tension()) / µ / 2 # [m²/s²]
	
		let dt_dt_ux = laplace_ux * C
		let dt_dt_uy = laplace_uy * C
	
		dt_ux += dt_dt_ux * dt
		dt_uy += dt_dt_uy * dt
		ux += dt_ux * dt
		uy += dt_uy * dt
			
		# boundary
		let n = ux.grid.nx
		ux.set(0,0,0, 0)
		uy.set(0,0,0, 0)
		dt_ux.set(0,0,0, 0)
		dt_uy.set(0,0,0, 0)
		ux.set(n-1,0,0, 0)
		uy.set(n-1,0,0, 0)
		dt_ux.set(n-1,0,0, 0)
		dt_uy.set(n-1,0,0, 0)
	
	func override on_process()
		# assume f32
		# assume PER_VERTEX
		for ux in in_ux.value()
			for uy in in_uy.value()
				for dt_ux in in_dt_ux.value()
					for dt_uy in in_dt_uy.value()
		
						let dt = 0.00002 #simulation_dt
						let N = 100
						for i in 0:N
							substep(dt / N, ux, uy, dt_ux, dt_uy)
			
						var vu = create_vector_field(ux.grid, f32, SamplingMode.PER_VERTEX)
			
						for i in 0:ux.grid.nx+1
							vu.set(i, 0, 0, [ux.v32[i]*10,uy.v32[i]*10,0])
			
						out_u.set(vu)
	
		